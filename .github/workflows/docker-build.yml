name: 自动构建并推送容器镜像

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要write权限来创建tag
      packages: write

    steps:
      # 检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 检出完整历史以获取准确的标签信息

      # 安装buildah
      - name: 安装buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah
          buildah --version

      # 检查修改的文件，决定是否需要构建
      - name: 检查修改的文件
        id: check_files
        run: |
          # 获取修改的文件列表
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # 获取此次推送中修改的文件列表
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # 获取PR中修改的文件列表
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          fi
          
          # 输出修改的文件
          echo "修改的文件: $CHANGED_FILES"
          
          # 检查是否只修改了docker-build.yml文件
          ONLY_WORKFLOW_CHANGED=true
          for file in $CHANGED_FILES; do
            if [[ "$file" != ".github/workflows/docker-build.yml" ]]; then
              ONLY_WORKFLOW_CHANGED=false
              break
            fi
          done
          
          # 设置输出变量
          if [[ "$ONLY_WORKFLOW_CHANGED" == "true" ]] && [[ ! -z "$CHANGED_FILES" ]]; then
            echo "仅修改了workflow文件，不需要构建镜像"
            echo "need_build=false" >> $GITHUB_OUTPUT
          else
            echo "需要构建镜像"
            echo "need_build=true" >> $GITHUB_OUTPUT
          fi

      # 登录所有容器仓库
      - name: 登录容器仓库
        if: steps.check_files.outputs.need_build == 'true'
        run: |
          # 登录Docker Hub
          echo "正在登录Docker Hub..."
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | buildah login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin docker.io
          echo "✅ Docker Hub登录成功"
          
          # 登录GitHub Container Registry
          echo "正在登录GitHub Container Registry..."
          set +e  # 允许登录失败但继续执行
          echo "${{ secrets.GHCR_PUSH_TOKEN }}" | buildah login -u "${{ secrets.GHCR_NAME }}" --password-stdin ghcr.io
          GHCR_LOGIN_STATUS=$?
          set -e
          
          if [ $GHCR_LOGIN_STATUS -eq 0 ]; then
            echo "✅ GitHub Container Registry登录成功"
            echo "GHCR_LOGIN_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ GitHub Container Registry登录失败，错误码: $GHCR_LOGIN_STATUS"
            echo "GHCR_LOGIN_SUCCESS=false" >> $GITHUB_ENV
          fi
          
          # 登录git.t2be.cn
          echo "正在登录git.t2be.cn..."
          set +e  # 允许登录失败但继续执行
          echo "${{ secrets.GIT2BE_PUSH_TOKEN }}" | buildah login -u "${{ secrets.GIT2BE_NAME }}" --password-stdin git.t2be.cn
          GIT2BE_LOGIN_STATUS=$?
          set -e
          
          if [ $GIT2BE_LOGIN_STATUS -eq 0 ]; then
            echo "✅ git.t2be.cn登录成功"
            echo "GIT2BE_LOGIN_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ git.t2be.cn登录失败"
            echo "GIT2BE_LOGIN_SUCCESS=false" >> $GITHUB_ENV
          fi
          


      # 读取版本号用于镜像标签
      - name: 读取版本号
        if: steps.check_files.outputs.need_build == 'true'
        id: version
        run: |
          VERSION=$(cat version.txt | tr -d '[:space:]')
          # 将仓库名转换为小写以符合Docker命名规范
          LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "NGINX_IMAGE_TAG=${VERSION}-nginx-alpine-sts" >> $GITHUB_OUTPUT
          echo "CADDY_IMAGE_TAG=${VERSION}-caddy-alpine-sts" >> $GITHUB_OUTPUT
          echo "LOWERCASE_REPO=$LOWERCASE_REPO" >> $GITHUB_OUTPUT
          echo "读取到的版本号: $VERSION，Nginx镜像标签: ${VERSION}-nginx-alpine-sts，Caddy镜像标签: ${VERSION}-caddy-alpine-sts"

      # 构建并推送容器镜像
      - name: 使用buildah构建镜像
        if: steps.check_files.outputs.need_build == 'true'
        run: |
          # 确保构建脚本有执行权限
          chmod +x ./build-with-buildah.sh
          
          # 定义版本标签和仓库信息
          NGINX_IMAGE_TAG="${{ steps.version.outputs.NGINX_IMAGE_TAG }}"
          CADDY_IMAGE_TAG="${{ steps.version.outputs.CADDY_IMAGE_TAG }}"
          LOWERCASE_REPO="${{ steps.version.outputs.LOWERCASE_REPO }}"
          
          # 仓库列表
          DOCKER_HUB_REPO="$LOWERCASE_REPO"
          GHCR_REPO="ghcr.io/${LOWERCASE_REPO}"
          GIT2BE_REPO="git.t2be.cn/${LOWERCASE_REPO}"
          PH_REPO="ph.nas.t2be.cn/${LOWERCASE_REPO}"
          
          # 构建Nginx版本镜像
          echo "构建Nginx版本镜像..."
          # 创建临时目录存放Nginx相关文件
          mkdir -p ./tmp-build/nginx
          cp -r ./start.sh ./tmp-build/nginx/
          
          # 运行buildah构建脚本并指定启动脚本
          NGINX_IMAGE_NAME="gocomicmosaic:nginx-latest"
          ./build-with-buildah.sh "${NGINX_IMAGE_NAME}" "./tmp-build/nginx/start.sh"
          
          # 构建Caddy版本镜像
          echo "构建Caddy版本镜像..."
          # 创建临时目录存放Caddy相关文件
          mkdir -p ./tmp-build/caddy
          cp -r ./start-caddy.sh ./tmp-build/caddy/
          
          # 运行buildah构建脚本并指定启动脚本
          CADDY_IMAGE_NAME="gocomicmosaic:caddy-latest"
          ./build-with-buildah.sh "${CADDY_IMAGE_NAME}" "./tmp-build/caddy/start-caddy.sh"
          
          # 为Nginx版本镜像添加标签
          echo "为Nginx版本镜像添加标签: $DOCKER_HUB_REPO:$NGINX_IMAGE_TAG"
          buildah tag $NGINX_IMAGE_NAME $DOCKER_HUB_REPO:$NGINX_IMAGE_TAG
          buildah tag $NGINX_IMAGE_NAME $GHCR_REPO:$NGINX_IMAGE_TAG
          buildah tag $NGINX_IMAGE_NAME $GIT2BE_REPO:$NGINX_IMAGE_TAG
          
          # 为Caddy版本镜像添加标签
          echo "为Caddy版本镜像添加标签: $DOCKER_HUB_REPO:$CADDY_IMAGE_TAG"
          buildah tag $CADDY_IMAGE_NAME $DOCKER_HUB_REPO:$CADDY_IMAGE_TAG
          buildah tag $CADDY_IMAGE_NAME $GHCR_REPO:$CADDY_IMAGE_TAG
          buildah tag $CADDY_IMAGE_NAME $GIT2BE_REPO:$CADDY_IMAGE_TAG
          
          # 为Docker Hub添加latest标签（默认为Nginx版本）
          echo "添加Docker Hub latest标签（指向Nginx版本）: $DOCKER_HUB_REPO:latest"
          buildah tag $NGINX_IMAGE_NAME $DOCKER_HUB_REPO:latest
          
          # 为Docker Hub添加特定的nginx-latest和caddy-latest标签
          echo "添加特定的最新版本标签"
          buildah tag $NGINX_IMAGE_NAME $DOCKER_HUB_REPO:nginx-latest
          buildah tag $CADDY_IMAGE_NAME $DOCKER_HUB_REPO:caddy-latest
          
          # 保存标签信息供后续步骤使用
          echo "NGINX_IMAGE_TAG=$NGINX_IMAGE_TAG" >> $GITHUB_ENV
          echo "CADDY_IMAGE_TAG=$CADDY_IMAGE_TAG" >> $GITHUB_ENV
          echo "LOWERCASE_REPO=$LOWERCASE_REPO" >> $GITHUB_ENV
          echo "DOCKER_HUB_REPO=$DOCKER_HUB_REPO" >> $GITHUB_ENV
          echo "GHCR_REPO=$GHCR_REPO" >> $GITHUB_ENV
          echo "GIT2BE_REPO=$GIT2BE_REPO" >> $GITHUB_ENV
          
          echo "保存的小写仓库名: $LOWERCASE_REPO"

      # 推送镜像到所有容器仓库
      - name: 推送镜像到所有容器仓库
        if: steps.check_files.outputs.need_build == 'true'
        run: |
          VERSION_TAG="${VERSION_TAG}"
          
          # 推送函数 - 允许单个推送失败但继续执行
          push_image() {
            local repo=$1
            local tag=$2
            local repo_name=$3
            
            echo "📦 推送镜像到 $repo_name: $repo:$tag"
            set +e  # 允许推送失败但继续执行其他推送
            buildah push $repo:$tag
            if [ $? -eq 0 ]; then
              echo "✅ 成功推送到 $repo_name"
              return 0
            else
              echo "❌ 推送到 $repo_name 失败，继续尝试其他仓库"
              return 1
            fi
          }
          
          # 推送Nginx版本镜像到各个仓库
          push_image "${DOCKER_HUB_REPO}" "${NGINX_IMAGE_TAG}" "Docker Hub (Nginx版本)"
          push_image "${GHCR_REPO}" "${NGINX_IMAGE_TAG}" "GitHub Container Registry (Nginx版本)"
          push_image "${GIT2BE_REPO}" "${NGINX_IMAGE_TAG}" "git.t2be.cn (Nginx版本)"
          
          # 推送Caddy版本镜像到各个仓库
          push_image "${DOCKER_HUB_REPO}" "${CADDY_IMAGE_TAG}" "Docker Hub (Caddy版本)"
          push_image "${GHCR_REPO}" "${CADDY_IMAGE_TAG}" "GitHub Container Registry (Caddy版本)"
          push_image "${GIT2BE_REPO}" "${CADDY_IMAGE_TAG}" "git.t2be.cn (Caddy版本)"
          
          # 推送Docker Hub latest标签（指向Nginx版本）
          push_image "${DOCKER_HUB_REPO}" "latest" "Docker Hub (latest标签，指向Nginx版本)"
          
          # 推送特定的nginx-latest和caddy-latest标签
          push_image "${DOCKER_HUB_REPO}" "nginx-latest" "Docker Hub (nginx-latest标签)"
          push_image "${DOCKER_HUB_REPO}" "caddy-latest" "Docker Hub (caddy-latest标签)"
          
          # 检查GHCR的登录状态
          if [ "$GHCR_LOGIN_SUCCESS" != "true" ]; then
            echo "⚠️ GitHub Container Registry登录失败，跳过推送"
          else
            # 为GHCR推送操作添加超时保护
            timeout 30s bash -c "set +e; push_image \"${GHCR_REPO}\" \"$VERSION_TAG\" \"GitHub Container Registry\"; exit $?"
            PUSH_EXIT_CODE=$?
            
            if [ $PUSH_EXIT_CODE -eq 124 ]; then
              echo "⏰ GitHub Container Registry镜像推送超时（超过30秒），已跳过"
            elif [ $PUSH_EXIT_CODE -ne 0 ] && [ $PUSH_EXIT_CODE -ne 124 ]; then
              echo "❌ GitHub Container Registry镜像推送失败，错误码: $PUSH_EXIT_CODE"
            fi
          fi
          
          # 检查git.t2be.cn的登录状态
          if [ "$GIT2BE_LOGIN_SUCCESS" != "true" ]; then
            echo "⚠️ git.t2be.cn登录失败，跳过推送"
          else
            # 检查git.t2be.cn的健康状态，使用带超时的curl命令
            echo "🔍 检查git.t2be.cn仓库健康状态（超时设置：10秒）..."
            set +e  # 允许检查失败但继续执行
            # 使用curl进行健康检查，设置10秒超时
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 10 https://git.t2be.cn/v2/)
            CURL_EXIT_CODE=$?
            
            if [ $CURL_EXIT_CODE -eq 0 ] && [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ git.t2be.cn仓库可用且响应正常，准备推送镜像"
              # 为推送操作也添加超时保护
              timeout 30s bash -c "set +e; push_image \"${GIT2BE_REPO}\" \"$VERSION_TAG\" \"git.t2be.cn\"; exit $?"
              PUSH_EXIT_CODE=$?
              
              if [ $PUSH_EXIT_CODE -eq 124 ]; then
                echo "⏰ git.t2be.cn镜像推送超时（超过30秒），已跳过"
              elif [ $PUSH_EXIT_CODE -ne 0 ] && [ $PUSH_EXIT_CODE -ne 124 ]; then
                echo "❌ git.t2be.cn镜像推送失败，错误码: $PUSH_EXIT_CODE"
              fi
            else
              if [ $CURL_EXIT_CODE -eq 28 ]; then
                echo "⏰ git.t2be.cn仓库连接超时（超过10秒），跳过推送"
              else
                echo "⚠️ git.t2be.cn仓库不可用（退出码: $CURL_EXIT_CODE, 状态码: $HTTP_STATUS），跳过推送"
              fi
            fi
          fi
          

          
          set -e  # 恢复错误退出模式
          echo "✅ 镜像推送流程完成"

      # 更新版本号、创建tag和GitHub Release
      - name: 更新版本号、创建tag和GitHub Release
        if: steps.check_files.outputs.need_build == 'true' && success() && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 读取当前版本号
          CURRENT_VERSION=$(cat version.txt)
          echo "当前版本: $CURRENT_VERSION"
          
          # 增加补丁版本号（例如从1.0.0到1.0.1）
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$3=$3+1; OFS="."; print $1,$2,$3}')
          echo "新版本: $NEW_VERSION"
          
          # 更新version.txt文件
          echo $NEW_VERSION > version.txt
          echo "✅ 版本号已更新到 $NEW_VERSION"
          
          # 配置git用户
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # 添加version.txt文件
          git add version.txt
          
          # 提交更改
          git commit -m "自动更新版本号到 $NEW_VERSION"
          
          # 推送更改
          git push origin main
          
          # 创建新的tag
          TAG_NAME="v$NEW_VERSION"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "✅ 创建并推送tag: $TAG_NAME"
          
          # 获取提交日志，用于Release说明
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          
          # 安装gh命令行工具（GitHub官方CLI）
          echo "安装GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
          
          # 创建GitHub Release
          echo "创建GitHub Release: $TAG_NAME"
          echo "发布说明内容:\n$CHANGELOG"
          
          # 使用gh命令创建Release（使用环境变量直接认证，不需要单独的login步骤）
          # 确保CHANGELOG不为空
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- 自动版本更新到 $NEW_VERSION"
          fi
          
          # 获取镜像标签信息
          NGINX_IMAGE_TAG="${NEW_VERSION}-nginx-alpine-sts"
          CADDY_IMAGE_TAG="${NEW_VERSION}-caddy-alpine-sts"
          # 从环境变量获取小写仓库名，避免重复计算
          LOWERCASE_REPO="${LOWERCASE_REPO}"
          echo "GitHub Release中使用小写仓库名: $LOWERCASE_REPO"
          
          # 构建镜像仓库地址列表
          DOCKER_HUB_NGINX_IMAGE="${DOCKER_HUB_REPO}:${NGINX_IMAGE_TAG}"
          DOCKER_HUB_CADDY_IMAGE="${DOCKER_HUB_REPO}:${CADDY_IMAGE_TAG}"
          GHCR_NGINX_IMAGE="${GHCR_REPO}:${NGINX_IMAGE_TAG}"
          GHCR_CADDY_IMAGE="${GHCR_REPO}:${CADDY_IMAGE_TAG}"

          
          # 直接使用环境变量进行认证和Release创建
          # 注意：GITHUB_TOKEN已在环境变量中设置，gh命令会自动使用它
          echo "创建GitHub Release..."
          set +e  # 允许命令失败但继续执行
          # 创建Release说明文本文件
          echo "## 版本 $NEW_VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "### 更新内容" >> release-notes.md
          echo "$CHANGELOG" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 镜像信息" >> release-notes.md
          echo "#### Nginx版本（默认）" >> release-notes.md
          echo "- docker pull $DOCKER_HUB_NGINX_IMAGE" >> release-notes.md
          echo "- docker pull $GHCR_NGINX_IMAGE" >> release-notes.md
          echo "- docker pull ${DOCKER_HUB_REPO}:latest # 默认指向Nginx版本" >> release-notes.md
          echo "- docker pull ${DOCKER_HUB_REPO}:nginx-latest # 始终指向最新Nginx版本" >> release-notes.md
          echo "" >> release-notes.md
          echo "#### Caddy版本（支持自动HTTPS）" >> release-notes.md
          echo "- docker pull $DOCKER_HUB_CADDY_IMAGE" >> release-notes.md
          echo "- docker pull $GHCR_CADDY_IMAGE" >> release-notes.md
          echo "- docker pull ${DOCKER_HUB_REPO}:caddy-latest # 始终指向最新Caddy版本" >> release-notes.md
          echo "" >> release-notes.md
          echo "- 构建提交: ${{ github.sha }}" >> release-notes.md
          
          # 使用文件内容作为notes创建Release
          gh release create "$TAG_NAME" \
            --title "GoComicMosaic v$NEW_VERSION" \
            --notes-file release-notes.md \
            --prerelease=false
            
          # 检查命令是否成功
          if [ $? -eq 0 ]; then
            echo "✅ GitHub Release 创建成功: https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
          else
            echo "⚠️ GitHub Release 创建失败，这可能是由于权限问题或标签已存在。"
            echo "但tag已成功创建和推送，版本更新已完成。"
          fi
          set -e  # 恢复错误立即退出模式

      # 构建完成后的通知
      - name: 构建完成通知
        if: steps.check_files.outputs.need_build == 'true' && success()
        run: |
          VERSION=$(cat version.txt | tr -d '[:space:]')
          NGINX_IMAGE_TAG="${VERSION}-nginx-alpine-sts"
          CADDY_IMAGE_TAG="${VERSION}-caddy-alpine-sts"
          # 从环境变量获取小写仓库名和仓库地址
          LOWERCASE_REPO="${LOWERCASE_REPO}"
          DOCKER_HUB_REPO="${DOCKER_HUB_REPO}"
          GHCR_REPO="${GHCR_REPO}"
          GIT2BE_REPO="${GIT2BE_REPO}"

          
          echo "通知中使用小写仓库名: $LOWERCASE_REPO"
          echo "✅ 容器镜像构建并推送成功！"
          echo "📚 所有可用镜像仓库地址:"
          echo "🔹 Nginx版本:"
          echo "  • Docker Hub: $DOCKER_HUB_REPO:$NGINX_IMAGE_TAG"
          echo "  • Docker Hub (latest): $DOCKER_HUB_REPO:latest # 默认指向Nginx版本"
          echo "  • Docker Hub (nginx-latest): $DOCKER_HUB_REPO:nginx-latest"
          echo "  • GitHub Container Registry: $GHCR_REPO:$NGINX_IMAGE_TAG"
          echo "  • GitLab (git.t2be.cn): $GIT2BE_REPO:$NGINX_IMAGE_TAG"
          echo "🔹 Caddy版本（支持自动HTTPS）:"
          echo "  • Docker Hub: $DOCKER_HUB_REPO:$CADDY_IMAGE_TAG"
          echo "  • Docker Hub (caddy-latest): $DOCKER_HUB_REPO:caddy-latest"
          echo "  • GitHub Container Registry: $GHCR_REPO:$CADDY_IMAGE_TAG"
          echo "  • GitLab (git.t2be.cn): $GIT2BE_REPO:$CADDY_IMAGE_TAG"

          echo "📦 镜像大小优化: 使用buildah构建减小体积"
          echo "📝 构建信息: 提交SHA - ${{ github.sha }}"
          echo "⚡ 优势: 与Docker相比，buildah生成的镜像体积更小，更适合生产环境部署"
          if [ "${{ github.ref }}" = 'refs/heads/main' ]; then
            echo "🚀 版本号已更新到 $VERSION 并创建了相应tag"
          fi

      # 构建失败时的故障排除信息
      - name: 构建失败故障排除
        if: steps.check_files.outputs.need_build == 'true' && failure()
        run: |
          echo "❌ 容器镜像构建失败！"
          echo "💡 故障排除提示："
          echo "1. 确保Docker Hub凭证正确设置在GitHub Secrets中"
          echo "2. 检查build-with-buildah.sh脚本语法是否正确"
          echo "3. 验证构建环境网络连接是否正常"
          echo "4. 查看完整日志以获取详细错误信息"
          echo "5. 确保buildah工具正确安装并具有足够权限"