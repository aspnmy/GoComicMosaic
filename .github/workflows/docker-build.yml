name: 自动构建并推送容器镜像

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要write权限来创建tag
      packages: write

    steps:
      # 检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 检出完整历史以获取准确的标签信息

      # 安装buildah
      - name: 安装buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah
          buildah --version

      # 登录Docker Hub
      - name: 登录Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | buildah login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin docker.io

      # 提取镜像元数据（标签和标签）
      - name: 提取容器元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            latest
          labels: |
            org.opencontainers.image.description=GoComicMosaic开源影视资源共建平台
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ github.sha }}

      # 构建并推送容器镜像
      - name: 使用buildah构建镜像
        run: |
          # 确保构建脚本有执行权限
          chmod +x ./build-with-buildah.sh
          
          # 运行buildah构建脚本
          ./build-with-buildah.sh
          
          # 为构建的镜像添加所有标签
          IMAGE_NAME="gocomicmosaic:latest"
          # 将标签输出转换为数组（使用换行符作为分隔符）
          TAGS="${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "添加标签: $tag"
              buildah tag $IMAGE_NAME $tag
            fi
          done <<< "$TAGS"

      # 推送镜像
      - name: 推送镜像到Docker Hub
        run: |
          # 使用安全的方式解析标签列表
          TAGS="${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "推送: $tag"
              buildah push $tag
            fi
          done <<< "$TAGS"

      # 更新版本号、创建tag和GitHub Release
      - name: 更新版本号、创建tag和GitHub Release
        if: success() && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 读取当前版本号
          CURRENT_VERSION=$(cat version.txt)
          echo "当前版本: $CURRENT_VERSION"
          
          # 增加补丁版本号（例如从1.0.0到1.0.1）
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$3=$3+1; OFS="."; print $1,$2,$3}')
          echo "新版本: $NEW_VERSION"
          
          # 更新version.txt文件
          echo $NEW_VERSION > version.txt
          echo "✅ 版本号已更新到 $NEW_VERSION"
          
          # 配置git用户
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # 添加version.txt文件
          git add version.txt
          
          # 提交更改
          git commit -m "自动更新版本号到 $NEW_VERSION"
          
          # 推送更改
          git push origin main
          
          # 创建新的tag
          TAG_NAME="v$NEW_VERSION"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "✅ 创建并推送tag: $TAG_NAME"
          
          # 获取提交日志，用于Release说明
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          
          # 安装gh命令行工具（GitHub官方CLI）
          echo "安装GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
          
          # 创建GitHub Release
          echo "创建GitHub Release: $TAG_NAME"
          echo "发布说明内容:\n$CHANGELOG"
          
          # 使用gh命令创建Release（使用环境变量直接认证，不需要单独的login步骤）
          # 确保CHANGELOG不为空
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- 自动版本更新到 $NEW_VERSION"
          fi
          
          # 直接使用环境变量进行认证和Release创建
          # 注意：GITHUB_TOKEN已在环境变量中设置，gh命令会自动使用它
          echo "创建GitHub Release..."
          set +e  # 允许命令失败但继续执行
          gh release create "$TAG_NAME" \
            --title "GoComicMosaic v$NEW_VERSION" \
            --notes "## 版本 $NEW_VERSION\n\n### 更新内容\n$CHANGELOG\n\n### 镜像信息\n- Docker Hub: ${{ github.repository }}:$TAG_NAME\n- 构建提交: ${{ github.sha }}" \
            --prerelease=false
            
          # 检查命令是否成功
          if [ $? -eq 0 ]; then
            echo "✅ GitHub Release 创建成功: https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
          else
            echo "⚠️ GitHub Release 创建失败，这可能是由于权限问题或标签已存在。"
            echo "但tag已成功创建和推送，版本更新已完成。"
          fi
          set -e  # 恢复错误立即退出模式

      # 构建完成后的通知
      - name: 构建完成通知
        if: success()
        run: |
          echo "✅ 容器镜像构建并推送成功！"
          echo "🔍 可用标签: ${{ steps.meta.outputs.tags }}"
          echo "📦 镜像大小优化: 使用buildah构建减小体积"
          echo "📝 构建信息: 提交SHA - ${{ github.sha }}"
          echo "⚡ 优势: 与Docker相比，buildah生成的镜像体积更小，更适合生产环境部署"
          if [ "${{ github.ref }}" = 'refs/heads/main' ]; then
            NEW_VERSION=$(cat version.txt)
            echo "🚀 版本号已更新到 $NEW_VERSION 并创建了相应tag"
          fi

      # 构建失败时的故障排除信息
      - name: 构建失败故障排除
        if: failure()
        run: |
          echo "❌ 容器镜像构建失败！"
          echo "💡 故障排除提示："
          echo "1. 确保Docker Hub凭证正确设置在GitHub Secrets中"
          echo "2. 检查build-with-buildah.sh脚本语法是否正确"
          echo "3. 验证构建环境网络连接是否正常"
          echo "4. 查看完整日志以获取详细错误信息"
          echo "5. 确保buildah工具正确安装并具有足够权限"